#[macro_use]
extern crate glium;

use glium::Surface;
use std::process::exit;


mod window;
mod fourier_transformation;
mod audio_management;
mod frequency_bars;
mod rect;

//TODO Fileselector
//TODO Malen
//TODO Audiodatein lesen
//TODO FFT-Bibliotheken benutzen

use std::collections::VecDeque;
use std::iter::IntoIterator;
use std::iter::FromIterator;
use std::sync::mpsc;
use std::sync::mpsc::{Sender, Receiver};
use crate::window::window_struct;
use std::thread;
use std::thread::sleep;
use std::time::Duration;

fn main() {

    let (ValueSender, ValueReciver): (Sender<f32>, Receiver<f32>) = mpsc::channel();
    /*let thread_Sender = ValueSender.clone();

    thread::spawn(|| {
        let thread_Sender = thread_Sender;

        let values = [-0.008698253, -0.010613276, -0.010406332, -0.00892393, -0.0069589834, -0.005118963, -0.004514515, -0.0052706418, -0.0065354267, -0.008365565, -0.011268008, -0.014902383, -0.017959852, -0.018931335, -0.017852305, -0.015929716, -0.01312756, -0.009184117, -0.0056381305, -0.0038764947, -0.0035848473, -0.0044476124, -0.0066071865, -0.00881997, -0.008833191, -0.007133818, -0.006914998, -0.007953268, -0.006585295, -0.0034016338, -0.0022135915, -0.0026751175, -0.0024245637, -0.0015470298, -0.000432026, 0.000476650, 0.0003865054, 0.0006423704, 0.0019997493, 0.0026373325, 0.0029728492, 0.0046097827, 0.005673784, 0.0043336293, 0.0012306273, -0.0028957613, -0.0063159238, -0.0075800465, -0.008430843, -0.009714648, -0.009988228, -0.009875506, -0.009857819, -0.008444306, -0.0067564026, -0.0069766734, -0.008574244, -0.010680031, -0.01167185, -0.009402384, -0.0062224027, -0.005401625, -0.0058911834, -0.0072875684, -0.010755384, -0.0152273355, -0.01956293, -0.022018872, -0.019199608, -0.012567761, -0.008651748, -0.010626381, -0.016187405, -0.021514336, -0.024432713, -0.025562001, -0.027082829, -0.029464092, -0.02944399, -0.025107626, -0.021297561, -0.021818101, -0.02315197, -0.023533672, -0.024564456, -0.022875596, -0.0170699, -0.015289502, -0.021277556, -0.026428431, -0.024939476, -0.021181395, -0.017859064, -0.0111229345, 0.0008228019, 0.012506227, 0.014367575, 0.0026111456, -0.013012984, -0.020193025, -0.020759989, -0.024287507, -0.03140714, -0.03512295, -0.031879928, -0.023665791, -0.014394355, -0.008282996, -0.007308679, -0.008702722, -0.0094162645, -0.010012929, -0.0107248565, -0.010961218, -0.011235625, -0.008474977, 0.0011355667, 0.013561832, 0.02134116, 0.02120029, 0.015175493, 0.009126989, 0.006128605, 0.0062202304, 0.01249851, 0.024511235, 0.03595735, 0.04319442, 0.04326345, 0.039032318, 0.043393973, 0.054783825, 0.056630526, 0.051778983, 0.057379596, 0.07372981, 0.085109375, 0.08267668, 0.080190286, 0.093649894, 0.10725617, 0.09703391, 0.07160148, 0.04871862, 0.026401388, 0.005404191, 0.002214666, 0.024471816, 0.056733456, 0.07252837, 0.053431645, 0.0073606772, -0.035534192, -0.05934552, -0.07601523, -0.09589858, -0.10977303, -0.09701877, -0.052269075, -0.010526239, -0.0063862377, -0.019633565, -0.015994675, 0.000680933, 0.012578616, 0.011488363, 0.0020341447, 0.013239221, 0.06724217, 0.12520632, 0.122880876, 0.06873237, 0.03123248, 0.024917077, 0.0109275365, -0.012387381, -0.027811604, -0.04215178, -0.04761559, -0.035196096, -0.032382004, -0.0500601, -0.057636198, -0.037561916, -0.008015486, -0.0016650528, -0.024007633, -0.037134554, -0.03395798, -0.06471457, -0.13031465, -0.1694711, -0.17323206, -0.17720295, -0.17475066, -0.14768906, -0.123224504, -0.1363653, -0.17630774, -0.19680385, -0.16618916, -0.09230805, -0.018332388, -0.0037952287, -0.048689928, -0.06406456, -0.008911371, 0.044945035, 0.048984762, 0.02721598, 0.007942301, 0.03143083, 0.122318566, 0.21371946, 0.21943238, 0.15305008, 0.107844174, 0.14146936, 0.1971267, 0.19237287, 0.15720558, 0.15295509, 0.14383496, 0.08487147, 0.0044689532, -0.057235785, -0.076952934, -0.054534644, -0.03418173, -0.04874525, -0.08408517, -0.1302156, -0.18541172, -0.2342098, -0.27169868, -0.2971183, -0.29000285, -0.23259884, -0.14401191, -0.08922849, -0.11319671, -0.15631744, -0.13585554, -0.08964645, -0.119148985, -0.22174306, -0.26325792, -0.1486628, 0.01580378, 0.055425778, -0.024437344, -0.08365377, -0.049579594, 0.02284326, 0.02094011, -0.0665194, -0.102571145, -0.021506844, 0.06859507, 0.07108487, 0.0069313827, -0.04521908, -0.03713989, -0.0131538175, -0.031447697, -0.06270619, -0.06518913, -0.0540644, -0.053770773, -0.06912159, -0.081810385, -0.07073612, -0.047202475, -0.019986333, 0.019584836, 0.052078754, 0.05892306, 0.0481322, 0.001035327, -0.08934834, -0.14883491, -0.12136136, -0.06153427, -0.036538478, -0.033535812, -0.004838467, 0.06502586, 0.13879143, 0.17936182, 0.2182682, 0.2783848, 0.3047843, 0.2868526, 0.27498257, 0.2567174, 0.22512966, 0.23751405, 0.28784034, 0.3193961, 0.31942052, 0.29165366, 0.26579735, 0.27567077, 0.27668637, 0.23808987, 0.21589467, 0.23488978, 0.25896734, 0.25795186, 0.22420885, 0.18817209, 0.18676327, 0.21162094, 0.2296873, 0.20729409, 0.15223238, 0.12554975, 0.12593585, 0.085729875, 0.009357535, -0.04736634, -0.06747699, -0.06843383, -0.089082606, -0.14171287, -0.18546654, -0.20342365, -0.21201667, -0.2121978, -0.21181133, -0.22547126, -0.25069395, -0.27695495, -0.2801545, -0.24739352, -0.21073449, -0.2069603, -0.23607223, -0.2567791, -0.22608371, -0.17167199, -0.15125245, -0.16641508, -0.20222954, -0.24452588, -0.25147063, -0.22699217, -0.22710176, -0.25000986, -0.25599214, -0.25108758, -0.25008035, -0.24057923, -0.22704355, -0.23381664, -0.2605653, -0.2874152, -0.30043945, -0.28324547, -0.2316998, -0.1787244, -0.1563787, -0.15767089, -0.1582697, -0.14591374, -0.12479493, -0.10559021, -0.10221436, -0.12382947, -0.14956091, -0.15498392, -0.15231681, -0.1473851, -0.13087933, -0.122391865, -0.12399024, -0.103572205, -0.06922919, -0.05039212, -0.04538464, -0.04860851, -0.056972116, -0.060643047, -0.05577592, -0.03857084, -0.013918428, 0.0016336918, 0.0076183574, 0.0119103, 0.01791098, 0.0325044, 0.052863974, 0.07118775, 0.08480489, 0.08378518, 0.074342035, 0.079460844, 0.08865774, 0.0798743, 0.06686273, 0.067801565, 0.077538274, 0.086465426, 0.09076973, 0.08638094, 0.06812829, 0.041673902, 0.023763208, 0.024201453, 0.039740525, 0.053476363, 0.046064362, 0.024044221, 0.0047657853, -0.011433141, -0.017252717, -0.0010607681, 0.018434985, 0.021684201, 0.019802758, 0.02053609, 0.017514393, 0.017064387, 0.025784995, 0.033573173, 0.03683027, 0.03802845, 0.029846735, 0.020217974, 0.025940139, 0.03254057, 0.025158102, 0.018888729, 0.019619934, 0.019265484, 0.021224467, 0.030632049, 0.04580374, 0.05560839, 0.049790323, 0.044765774, 0.05478949, 0.060255207, 0.05077548, 0.043147106, 0.044351112, 0.046226516, 0.043707665, 0.038676787, 0.033557873, 0.029111883, 0.030379487, 0.036790434, 0.03862178, 0.036845084, 0.032710016, 0.01767189, -0.000803090, -0.008874121, -0.008082066, -0.0013608658, 0.0048101954, 0.0027937526, 0.0016869456, 0.005884164, 0.007477549, 0.010072679, 0.015883667, 0.016797122, 0.013587191, 0.0106395455, 0.0070097963, 0.003752697, 0.0042579104, 0.009943581, 0.01416499, 0.007821054, -0.003967439, -0.009311355, -0.005416393, 0.0024456242, 0.006013416, 0.0050680926, 0.0061705983, 0.005536541, 0.0003205019, -0.0013001551, 0.0028267389, 0.0059852484, 0.008286516, 0.009058609, 0.007479746, 0.007991849, 0.009582615, 0.006812364, 0.0018074431, -0.0003104307, -0.0014082813, -0.005132719, -0.008481312, -0.009148821, -0.010860461, -0.013426606, -0.01354145, -0.0123582855, -0.011250602, -0.012222601, -0.01643226, -0.017823061, -0.016056214, -0.019347096, -0.024630176];
        //let values = [1 as f32, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1];


        for i in values.iter(){
            //thread_Sender.send(1 as f32 - i as f32*1.0/512.0);
            thread_Sender.send(*i as f32);
            sleep(Duration::from_millis(1));
        }


    });*/

    //window::start_window(ValueReciver);*/

    // FFT
    let data: Vec<f32> = vec![1.0, 2.0, 3.0, 4.0];
    let mut data = fourier_transformation::data_to_c64(data);
    println!("{:?}\n\n", data);
    data = fourier_transformation::transform(data);
    println!("{:?}", data);

    // Argumente
    use std::env;
    let args: Vec<String> = env::args().collect();
    // aud -h testen und ggf. Hilfemenu ausgeben
    for arg in &args {
        if *arg == String::from("-h") {
            println!("Aufruf: ausiovisualizer.exe <DATEINAME> <OPTION>\n\tDATEINAME - der Name der Audiodatei\n\tOPTION - zusätzliche Einstellungsmöglichkeit\n");
            exit(0);
        }
    }
    // Überprüfen ob Dateiname vorhanden ist
    if args.len() < 2 {
        println!("Bitte den Dateinamen der Audiodatei als Argument übergeben.");
        exit(1);
    }

    let fileName = args[1].clone();
    thread::spawn( || {
        // Read audio
        let fileName = fileName;
        audio_management::play_audio(&fileName, ValueSender);

    });

    // Start Window
    window::start_window(ValueReciver);
}